twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# Use the API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
summary(req)
summary(req$url)
summary(req$headers)
# Search tweets with '#umstead'
dmhash_tweets = searchTwitter("#umstead")
install.packages("pacman")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(devtools, installr)
install.Rtools()
install_url("http://cran.r-project.org/src/contrib/Archive/Rstem/Rstem_0.4-1.tar.gz")
install_url("http://cran.r-project.org/src/contrib/Archive/sentiment/sentiment_0.2.tar.gz")
# harvest some tweets
some_tweets = searchTwitter("starbucks", n=10000, lang="en")
# Test/use the API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
some_tweets = searchTwitter("starbucks", n=10000, lang="en")
# authorisation
if (!require("pacman")) install.packages("pacman")
pacman::p_load(twitteR, ROAuth, RCurl)
api_key = "I3594NWUCQ9tdah9fpCQ7Fzzg"
api_secret = "OiZTdKnTkiFbvCQ4JFAtb3D8mhoVAHTv6EhXYuny8qrWallMGy"
access_token = "3856581436-yTEyf88U5Zf2gpSiCR7j8P6IWSU4VRHl4O30U4H"
access_token_secret = "QPN95xKXjK0LvL9lIBui6C0p7XZiiDnFocJ520GXUClmr"
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
# set up the URLs
reqURL = "https://api.twitter.com/oauth/request_token"
accessURL = "https://api.twitter.com/oauth/access_token"
authURL = "https://api.twitter.com/oauth/authorize"
twitCred = OAuthFactory$new(consumerKey = api_key, consumerSecret = api_secret, requestURL = reqURL, accessURL = accessURL, authURL = authURL)
twitCred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
source('C:/rprojects/Twitter/twitter_lab.R', echo=TRUE)
# harvest some tweets
some_tweets = searchTwitter("starbucks", n=10000, lang="en")
# Install and Activate Packages
install.packages("streamR", "RCurl", "ROAuth", "RJSONIO")
library(streamR)
library(RCurl)
library(RJSONIO)
library(stringr)
# The next step varies slightly from using the TwitteR package, in that we need
# to set up an OAuth handshake. This is accomplished using the ROAuth package.
# See the code below. NOTE: you will only need to do this one time, so long as
# you save to an .Rdata file (also included in the code). Also, please make sure
# that you run parts 1 and 2 separately (donâ€™t run the entire code at once). After
# you run part 1, a browser window will open requesting that you authorize this
# application. Once you click on authorize, copy the pin provided by Twitter into
# the R console and hit enter. Then run part 2.
# PART 1: Declare Twitter API Credentials & Create Handshake
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "I3594NWUCQ9tdah9fpCQ7Fzzg" # From dev.twitter.com
consumerSecret <- "OiZTdKnTkiFbvCQ4JFAtb3D8mhoVAHTv6EhXYuny8qrWallMGy" # From dev.twitter.com
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")
)
api_key = "I3594NWUCQ9tdah9fpCQ7Fzzg"
api_secret = "OiZTdKnTkiFbvCQ4JFAtb3D8mhoVAHTv6EhXYuny8qrWallMGy"
access_token = "3856581436-yTEyf88U5Zf2gpSiCR7j8P6IWSU4VRHl4O30U4H"
access_token_secret = "QPN95xKXjK0LvL9lIBui6C0p7XZiiDnFocJ520GXUClmr"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
searchTwitter("iphone")
registerTwitterOAuth(cred)
?setup_twitter_oauth
Umstead.tweets = searchTwitter('@Umstead',n=1000, cainfo="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
Umstead.tweets = searchTwitter('@Umstead',n=1000, cainfo="cacert.pem")
tweets <- searchTwitter("Obamacare OR ACA OR 'Affordable Care Act' OR #ACA",
n=100, lang="en", since="2014-08-20")
summary(tweets)
# Transform tweets list into a data frame
tweets.df <- twListToDF(tweets)
summary(tweets.df)
tweets.df[1]
# Use the searchTwitter function to only get tweets within 50 miles of Los Angeles
tweets_geo <- searchTwitter("Obamacare OR ACA OR 'Affordable Care Act' OR #ACA", n=100, lang="en", geocode="34.049933,-118.240843,50mi", since="2014-08-20")
tweets_geo.df <- twListToDF(tweets_geo)
ums.tweets <- searchTwitter("Umstead OR UmsteadPark OR 'Umstead Park' OR #Umstead",
n=100, lang="en", since="2014-08-20")
eno.tweets <- searchTwitter("Eno OR EnoRiver OR 'Eno River' OR #EnoRiver",
n=100, lang="en", since="2014-08-20")
tweets_geo <- searchTwitter("Obamacare OR ACA OR 'Affordable Care Act' OR #ACA", n=100, lang="en", geocode="35.9886,-78.9072,50mi", since="2014-08-20")
tweets_geo.df <- twListToDF(tweets_geo)
tweets_geo <- searchTwitter("Durham OR ACA OR 'Affordable Care Act' OR #ACA", n=100, lang="en", geocode="35.9886,-78.9072,50mi", since="2008-08-20")
tweets_geo.df <- twListToDF(tweets_geo)
test <- searchTwitter('patriots', geocode='42.375,-71.1061111,10mi')
test.df <- twListToDF(test)
summary(test.df)
test.df[1]
test <- searchTwitter('patriots', geocode='35.9886,-78.9072,10mi')
test.df <- twListToDF(test)
test.df[1]
test <- searchTwitter('nature OR wildlife OR greenspace', geocode='35.9886,-78.9072,10mi')
test <- searchTwitter('nature OR wildlife OR greenspace', geocode='35.9886,-78.9072,20mi')
test.df <- twListToDF(test)
test.df[1]
test <- searchTwitter('nature OR wildlife OR greenspace', n=100, lang="en", geocode='35.9886,-78.9072,20mi')
test <- searchTwitter('nature OR wildlife OR greenspace', n=100, lang="en", geocode='35.9886,-78.9072,20mi')
test <- searchTwitter('nature OR wildlife OR greenspace OR park', n=100, lang="en", geocode='35.9886,-78.9072,20mi')
test.df <- twListToDF(test)
test.df[1]
dur.tweets <- searchTwitter('run OR hike OR bike OR climb OR kayak OR sail', n=100, lang="en", geocode='35.9886,-78.9072,20mi')
ral.tweets <-  searchTwitter('run OR hike OR bike OR climb OR kayak OR sail', n=100, lang="en", geocode='35.7806,-78.6389,20mi')
dur.tweets <- searchTwitter('run OR hike OR bike OR climb OR kayak OR nature', n=100, lang="en", geocode='35.9886,-78.9072,20mi')
ral.tweets <-  searchTwitter('run OR hike OR bike OR climb OR kayak OR nature', n=100, lang="en", geocode='35.7806,-78.6389,20mi')
dur.tweets <- searchTwitter('run OR hike OR bike OR climb OR kayak OR jog', n=100, lang="en", geocode='35.9886,-78.9072,20mi')
ral.tweets <-  searchTwitter('run OR hike OR bike OR climb OR kayak OR jog', n=100, lang="en", geocode='35.7806,-78.6389,20mi')
dur.tweets <- searchTwitter('run OR hike OR bike OR climb OR kayak OR outside OR nature', n=100, lang="en", geocode='35.9886,-78.9072,20mi')
ral.tweets <-  searchTwitter('run OR hike OR bike OR climb OR kayak OR outside OR nature', n=100, lang="en", geocode='35.7806,-78.6389,20mi')
dur.tweets.df <- twListToDF(dur.tweets)
ral.tweets.df <- twListToDF(ral.tweets)
names(dur.tweets.df)
plot(dur.tweets.df$favoriteCount, dur.tweets.df$retweetCount) #plots scatterplot
?streamR
library(ROAuth)
library(streamR)
install.packages("streamR")
?streamR
library(ROAuth)
library(streamR)
credential <- OAuthFactory$new(consumerKey='I3594NWUCQ9tdah9fpCQ7Fzzg',
consumerSecret='OiZTdKnTkiFbvCQ4JFAtb3D8mhoVAHTv6EhXYuny8qrWallMGy',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
#authentication process
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
credential$handshake(cainfo="cacert.pem")
library(streamR)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "I3594NWUCQ9tdah9fpCQ7Fzzg"
consumerSecret <- "OiZTdKnTkiFbvCQ4JFAtb3D8mhoVAHTv6EhXYuny8qrWallMGy"
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,
requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
?setup_twitter_oauth
library(twitteR) # for static Twitter data
api_key = "I3594NWUCQ9tdah9fpCQ7Fzzg"
api_secret = "OiZTdKnTkiFbvCQ4JFAtb3D8mhoVAHTv6EhXYuny8qrWallMGy"
access_token = "3856581436-yTEyf88U5Zf2gpSiCR7j8P6IWSU4VRHl4O30U4H"
access_token_secret = "QPN95xKXjK0LvL9lIBui6C0p7XZiiDnFocJ520GXUClmr"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
token <- get("oauth_token", twitteR:::oauth_cache)
token
token$cache()
save(token,file="oauth_cache.RData")
library(streamR)
load("oauth_cache.Rdata")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "I3594NWUCQ9tdah9fpCQ7Fzzg"
consumerSecret <- "OiZTdKnTkiFbvCQ4JFAtb3D8mhoVAHTv6EhXYuny8qrWallMGy"
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,
requestURL = requestURL, accessURL = accessURL, authURL = authURL)
filterStream("tweets.json", track = c("Obama", "Biden"), timeout = 120,
oauth = my_oauth)
#install.packages("streamR")
#install.packages("ROAuth")
library(ROAuth)
library(streamR)
accessToken <- "3856581436-yTEyf88U5Zf2gpSiCR7j8P6IWSU4VRHl4O30U4H"
accessTokenSecret <- "QPN95xKXjK0LvL9lIBui6C0p7XZiiDnFocJ520GXUClmr"
consumerKey <- "I3594NWUCQ9tdah9fpCQ7Fzzg"
consumerSecret <- "OiZTdKnTkiFbvCQ4JFAtb3D8mhoVAHTv6EhXYuny8qrWallMGy"
my_oauth <- createOAUthToken(consumerKey, consumerSecret, accessToken, accessTokenSecret)
my_oauth <- createOAuthToken(consumerKey, consumerSecret, accessToken, accessTokenSecret)
# Code developed for Xmas Tree Biodiversity project
# September 2015
# Dr. C. Ashton Drew
# KDV Decision Analysis LLC
# www.cashtondrew.com
# OPEN LIBRARIES
library(reshape)
library(dplyr)
library(plyr)
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
data(expenditures)
p1 <- pcaCoDa(expenditures)
p1
p1$scores
p1$loadings
round(p1$loadings,2)
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker/SenseMakerShinyDemo3')
nonzero.fat <- storm.hlth[storm.hlth$FATALITIES>0,]
p <- ggplot(nonzero.fat, aes(factor(CLASS), log(FATALITIES)))
p + geom_boxplot()
nonzero.inj <- storm.hlth[storm.hlth$INJURIES>0,]
p <- ggplot(nonzero.fat, aes(factor(CLASS), INJURIES))
p + geom_boxplot()
p <- ggplot(nonzero.inj, aes(factor(CLASS), INJURIES))
logPLk <- log(PLk)
lake <- data.frame(Name="Higgins", Ad=87.41, r=0.2415, Ao=38.4, Pr=0.254)
area <- data.frame(Name="Higgins", For=83.47, Agr=0.16, Urb=3.78)
coHi <- data.frame(Name="Higgins", EcFrHi=40, EcAgHi=80, EcUrHi=150, EcPrHi=50, EcStHi=1, SRHi=0.5, PSIHi=0)
coLk <- data.frame(Name="Higgins", EcFrLk=20, EcAgLk=30, EcUrLk=90,EcPrLk=30, EcStLk=0.6, SRLk=0.75, PSILk=0)
coLo <- data.frame(Name="Higgins", EcFrLo=2, EcAgLo=10, EcUrLo=50, EcPrLo=15, EcStLo=0.3, SRLo=0.95, PSILo=0)
pop <- data.frame(Name="Higgins", IndP=0, DaysP=0, UnitsP=0, IndS=3.5, DaysS=60, UnitsS=1000)
NCap <- (pop$IndP*(pop$DaysP/365)*pop$UnitsP)+(pop$IndS*(pop$DaysS/365)*pop$UnitsS)
MHi <- (area$For*coHi$EcFrHi)+(area$Agr*coHi$EcAgHi)+(area$Urb*coHi$EcUrHi)+(lake$Ao*coHi$EcPrHi)+(NCap*coHi$EcStHi*(1-coHi$SRHi))+coHi$PSIHi
MLk <- (area$For*coLk$EcFrLk)+(area$Agr*coLk$EcAgLk)+(area$Urb*coLk$EcUrLk)+(lake$Ao*coLk$EcPrLk)+(NCap*coLk$EcStLk*(1-coLk$SRLk))+coLk$PSILk
MLo <- (area$For*coLo$EcFrLo)+(area$Agr*coLo$EcAgLo)+(area$Urb*coLo$EcUrLo)+(lake$Ao*coLo$EcPrLo)+(NCap*coLo$EcStLo*(1-coLo$SRLo))+coLo$PSILo
#TODO: vectorize this code for efficiency
LHi <- (MHi/lake$Ao)*10^-3
LLk <- MLk/lake$Ao*10^-3
LLo <- MLo/lake$Ao*10^-3
PHi<- LHi/(11.6+(1.2*qs))
PLk<- LLk/(11.6+(1.2*qs))
PLo<- LLo/(11.6+(1.2*qs))
Q <- (lake$Ad*lake$r)+(lake$Ao*lake$Pr)
qs <- Q/lake$Ao
PHi<- LHi/(11.6+(1.2*qs))
PLk<- LLk/(11.6+(1.2*qs))
PLo<- LLo/(11.6+(1.2*qs))
logPLk <- log(PLk)
logPLk <- ln(PLk)
logPLk <- log10(PLk)
install.packages("Kmisc")
Mout <- c(MHi, MLk, MLo)
barplot(Mout)
Mout.plot <- ggplot(Mout, aes(Mout)) +
geom_bar()
library(ggplot2)
Mout.plot <- ggplot(Mout, aes(Mout)) +
geom_bar()
Mout <- data.frame(MHi, MLk, MLo)
Mout.plot <- ggplot(Mout, aes(Mout)) +
geom_bar()
Mout.plot
Mout.plot <- ggplot(Mout, aes(Mout)) +
geom_bar(stat="identity")
Mout.plot
smplus <- (10^(logPLk+0.128))-PLk
10^2
logPLk+0.128
10^(logPLk+0.128)
(10^(logPLk+0.128))-PLk
smneg <- (10^(logPLk-0.128))-PLk
sLplus <- (PHi-Plk)/2
sLplus <- (PHi-PLk)/2
sLplus <- (PLk-PLo)/2
sLplus <- (PHi-PLk)/2
sLneg <- (PLk-PLo)/2
sTplus <- sqrt((smplus)^2+(sLplus)^2)
sTneg <- sqrt((smneg)^2+(sLneg)^2)
pbounded <- 1-(1/(2.25*h[1]^2))
h = c(1,2)
pbounded <- 1-(1/(2.25*h[1]^2))
uplimit <- PLk-(h*sTneg)
uplimit <- PLk-(h*sTneg)
h = 1
pbounded <- 1-(1/(2.25*h^2))
uplimit <- PLk-(h*sTneg)
lolimit <- PLk+(h*sTpos)
pbounded <- 1-(1/(2.25*h^2))
uplimit <- PLk-(h*sTneg)
lolimit <- PLk+(h*sTplus)
h = 2 # multiple of prediction error, choose 1 or 2
pbounded <- 1-(1/(2.25*h^2))
uplimit <- PLk-(h*sTneg)
lolimit <- PLk+(h*sTplus)
Code.Book <- data.frame(Variable=c("P", "L", "qs", "vs", "Q", "Ad", "Ao", "r", "Pr", "EcFr(Hi,Lk,Lo)", "EcAg(Hi,Lk,Lo)", "EcUr(Hi,Lk,Lo)", "EcPr(Hi,Lk,Lo)", "EcSt(Hi,Lk,Lo)", "AreaFr", "AreaAg", "AreaUr", "NCap", "SR(Hi,Lk,Lo)", "PSI(Hi,Lk,Lo)", "Ind(P,S)", "Days(P,S)", "Units(P,S)", "M", "smlog", "sm(pos,neg)", "sL(pos,neg)", "sT(pos,neg)", "h", "pbounded", "limit(up/lo)"),
Definition=c("phosphorus concentration", "phosphorus loading", "areal water loading", "apparent phosphorus settling velocity", "inflow water volume to lake", "watershed area", "lake surface area", "total annual unit runoff", "mean annual net precipitation", "export coefficient for forest land (high, most likely, low)", "export coefficient for agricultural land (high, most likely, low)", "export coefficient for urban area (high, most likely, low)", "export coefficient for precipitation (high, most likely, low)", "export coefficient for septic tanks (high, most likely, low)", "area of forest land", "area of agricultural land", "area of urban land", "number of capita years in watershed serviced by septic tank/tile filed systems impacting the lake", "soil retention coefficient (high, most likely, low)", "point source input (high, most likely, low)", "average number of persons per living unit (Permanent, Seasonal)", "number of days spent at unit per year", "number of living units", "total phosphorus mass loading", "log model error", "model error (pos,neg)", "loading error (pos,neg)", "uncertainty (pos,neg)", "multiplier constant", "probability that the confidence limits contain the true value", "confidence limits (up,lo)"),
Units=c("mg/L", "g/m2/yr", "m/yr", "m/yr", "10^6 m3/yr", "10^6 m2", "10^6 m2", "m/yr", "m/yr", "kg/10^6 m2/yr", "kg/10^6 m2/yr", "kg/10^6 m2/yr", "kg/10^6 m2/yr", "kg/(capita/yr)/yr", "10^6 m2", "10^6 m2", "10^6 m2", "N", "dimensionless", "kg/yr", "N", "N", "N", "kg/yr", "logarithmic units", "mg/L", "mg/L", "mg/L", "unitless", "probability", "mg/L" ))
kable(head(mtcars), format = "markdown", padding = 0)
barplot(c(MHi,MLk,MLo))
barplot(c(MHi,MLk,MLo), main="Total Phosphorus Mass Loading",
ylab="kg/yr", xlab="Scenario",
names.arg=c("High", "Most LIkely", "Low"))
barplot(c(MHi,MLk,MLo), main="Total Phosphorus Mass Loading",
ylab="kg/yr", xlab="Scenario", col="blue",
names.arg=c("High", "Most LIkely", "Low"))
barplot(c(LHi,LLk,LLo), main="Annual Areal Phosphorus Loading",
ylab="g/m^2/yr", xlab="Scenario", col="blue",
names.arg=c("High", "Most Likely", "Low"))
barplot(c(PHi,PLk,PLo), main="Lake Phosphorus Concentration",
ylab="mg/L", xlab="Scenario", col="blue",
names.arg=c("High", "Most Likely", "Low"))
if (limitlo<0.010){
trophlo <- "oligotrophic"
} else  if(0.01<limitlo<0.020){
trophlo <- "mesotrophic"
} else if (0.020<limitlo<0.050){
trophlo <- "eutrophic"
} else {
trophlo <- "hypereutrophic"
}
if (limitlo<0.010){
trophlo <- "oligotrophic"
} else if(0.01<limitlo & limitlo<0.020){
trophlo <- "mesotrophic"
} else if (0.020<limitlo & limitlo<0.050){
trophlo <- "eutrophic"
} else {
trophlo <- "hypereutrophic"
}
limitup <- PLk-(h*sTneg)
limitlo <- PLk+(h*sTpos)
#Positive and negative model errors
smpos <- (10^(logPLk+0.128))-PLk
smneg <- (10^(logPLk-0.128))-PLk
#Positive and negative loading errors
sLpos <- (PHi-PLk)/2
sLneg <- (PLk-PLo)/2
#Positive and negative uncertainty
sTpos <- sqrt((smpos)^2+(sLpos)^2)
sTneg <- sqrt((smneg)^2+(sLneg)^2)
# Confidence limits
# multiple of prediction error, h=1=55% bounds, h=2=90% bounds
h = 2
pbounded <- 1-(1/(2.25*h^2))
limitup <- PLk-(h*sTneg)
limitlo <- PLk+(h*sTpos)
if (limitlo<0.010){
trophlo <- "oligotrophic"
} else if(0.01<limitlo & limitlo<0.020){
trophlo <- "mesotrophic"
} else if (0.020<limitlo & limitlo<0.050){
trophlo <- "eutrophic"
} else {
trophlo <- "hypereutrophic"
}
if (limitup<0.010){
trophup <- "oligotrophic"
} else if(0.01<limitup & limitup<0.020){
trophup <- "mesotrophic"
} else if (0.020<limitup & limitup<0.050){
trophup <- "eutrophic"
} else {
trophup <- "hypereutrophic"
}
limitlo<0.010
0.01<limitlo & limitlo<0.020
limitlo <- PLk-(h*sTneg)
limitup <- PLk+(h*sTpos)
limitlo <- PLk-(h*sTneg)
limitlo
pbounded <- 1-(1/(2.25*1^2))
pbounded <- 1-(1/(2.25*1^2))
t = 1-0.5555555555555556
d = 2.25/t
sqrt(d)
c = sqrt((-2.25*0.5555555555555556)+2.25)
pbounded <- 1-(1/(2.25*2^2))
c = sqrt((-2.25*0.888888888888888888889)+2.25)
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker')
shiny::runApp('F:/OneDrive/P_Consulting/Proposals-Dev/SenseMaker/ShinySenseMaker')
shiny::runApp('E:/NZex')
example.list <- list()
example.list$attribute <- c("test")
get("example.list") # Works just fine
example.list <- list()
example.list$attribute <- c("test")
get("example.list$attribute") # Works just fine
runApp("SummaryBudget_app")
runApp("SummaryBudget_app")
library(shiny)
runApp("~/BudgetSummary_app")
runApp("F:/NZex/BudgetSummary_app")
runApp("E:/NZex/BudgetSummary_app")
list.files(examples/06_tabsets)
getwd()
system.file("E:/NZex/ShinyApps", package="shiny"),
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
library(ggplot2)
rangex <- c(0:0.1, step=0.05)
rangex
rangex <- seq(0, 0.1, 0.05)
rangex
rangex <- seq(0, 0.1, 0.005)
rangex
limitlo = 0.02
limitup = 0.04
ggplot() +
geom_line(data.frame(x = c(limitlo, limitup), y = c(1,1), ))
rangex <- seq(0, 0.1, 0.005)
rangeline <- data.frame(x = c(limitlo, limitup), y = c(1,1))
ggplot(data=rangeline, aes(x=x, y=y)) +
geom_line()
ggplot(data=rangeline, aes(x=x, y=y)) +
geom_line(aes(color="blue", size=3))
ggplot(data=rangeline, aes(x=x, y=y)) +
geom_line(aes(color="blue", size=3)) +
scale_size(range = c(0, 0.1))
ggplot(data=rangeline, aes(x=x, y=y)) +
geom_line(color="blue", size=3) +
scale_size(range = c(0, 0.1))
trophicbins <- data.frame(xstart = c(0,0.01,0.02,0.05), xend = c(0.01,0.02,0.05,0.1), col = letters[1:5])
ggplot() +
geom_rect(data = rects, aes(xmin = xstart, xmax = xend, ymin = -Inf, ymax = Inf, fill = col), alpha = 0.4) +
geom_line(data=rangeline, aes(x,y), color="blue", size=3) +
scale_size(range = c(0, 0.1))
ggplot() +
geom_rect(data=trophicbins, aes(xmin = xstart, xmax = xend, ymin = -Inf, ymax = Inf, fill = col), alpha = 0.4) +
geom_line(data=rangeline, aes(x,y), color="blue", size=3) +
scale_size(range = c(0, 0.1))
trophicbins <- data.frame(xstart = c(0,0.01,0.02,0.05), xend = c(0.01,0.02,0.05,0.1), col = letters[1:5])
trophicbins <- data.frame(xstart = c(0,0.01,0.02,0.05), xend = c(0.01,0.02,0.05,0.1), col = letters[1:4])
ggplot() +
geom_rect(data=trophicbins, aes(xmin = xstart, xmax = xend, ymin = -Inf, ymax = Inf, fill = col), alpha = 0.4) +
geom_line(data=rangeline, aes(x,y), color="blue", size=3) +
scale_size(range = c(0, 0.1))
ggplot() +
theme_bw() +
geom_rect(data=trophicbins, aes(xmin = xstart, xmax = xend, ymin = -Inf, ymax = Inf, fill = col), alpha = 0.4) +
geom_line(data=rangeline, aes(x,y), color="blue", size=3) +
scale_size(range = c(0, 0.1))
trophicbins <- data.frame(xstart = c(0,0.01,0.02,0.05), xend = c(0.01,0.02,0.05,0.1),
cats = c("Oligotrophic", "Mesotrophic", "Eutrophic", "Hypertrophic"))
ggplot() +
theme_bw() +
geom_rect(data=trophicbins, aes(xmin = xstart, xmax = xend, ymin = -Inf, ymax = Inf, fill = cats), alpha = 0.4) +
geom_line(data=rangeline, aes(x,y), color="blue", size=3) +
scale_size(range = c(0, 0.1))
ggplot() +
theme_bw() +
geom_rect(data=trophicbins, aes(xmin = xstart, xmax = xend, ymin = -Inf, ymax = Inf, fill = cats), alpha = 0.4) +
geom_line(data=rangeline, aes(x,y), color="blue", size=3) +
theme(axis.text.y = element_blank(), axis.ticks = element_blank())
ggplot() +
theme_bw() +
geom_rect(data=trophicbins, aes(xmin = xstart, xmax = xend, ymin = -Inf, ymax = Inf, fill = cats), alpha = 0.4) +
geom_line(data=rangeline, aes(x,y), color="blue", size=3) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.title.y=element_blank())
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
setwd("E:/P_Consulting/Proposals-Dev/Reckhow/LakeShiny")
lake <- read.csv("lake.csv")
#area <- read.csv("area.csv")
#pop <- read.csv("pop.csv")
coHi <- read.csv("coHi.csv")
#coLk <- read.csv("coLk.csv")
coLo <- read.csv("coLo.csv")
# areal.water.loading
Q <- (lake$Ad*lake$r)+(lake$Ao*lake$Pr)
qs <- Q/lake$Ao
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
library(shiny)
runApp(list(
ui = bootstrapPage(
numericInput('n', 'Number of obs', 100),
textOutput('text1'),
tags$head(tags$style("#text1{color: red;
font-size: 20px;
font-style: italic;
}"
)
)
),
server = function(input, output) {
output$text1 <- renderText({ paste("hello input is",input$n) })
}
))
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
shiny::runApp('E:/P_Consulting/Proposals-Dev/Reckhow/HigginsCoefs')
